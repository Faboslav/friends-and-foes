plugins {
	id 'java'
	id 'idea'
	id 'dev.architectury.loom'
	id 'architectury-plugin'
	id 'com.github.johnrengelman.shadow'
}

def subproject = stonecutter.current.project
def minecraftVersion = stonecutter.current.version

def modrinth(String name, String version) {
	return "maven.modrinth:$name:$version"
}

def prop(String name) {
	return rootProject.project(stonecutter.current.project).property(name).toString()
}

base {
	archivesName.set("${mod_id}-neoforge-mc${minecraftVersion}-${mod_version}")
}

architectury {
	platformSetupLoomIde()
	neoForge()
}

loom {
	silentMojangMappingsLicense()

	accessWidenerPath.set(project(":common:$subproject").loom.accessWidenerPath)

	runConfigs.all {
		ideConfigGenerated true
	}

	neoForge {
		runs {
			all {}

			data {
				data()
				programArgs("--all", "--mod", "${mod_id}")
				programArgs("--existing", project(":common").file("src/main/resources").absolutePath)
				programArgs("--output", project(":common").file("src/main/generated/resources").absolutePath)
				all {}
			}
		}
	}
}

configurations {
	common {
		canBeResolved = true
		canBeConsumed = false
	}

	compileClasspath.extendsFrom common
	runtimeClasspath.extendsFrom common
	developmentNeoForge.extendsFrom common

	shadowBundle {
		canBeResolved = true
		canBeConsumed = false
	}
}

dependencies {
	minecraft "com.mojang:minecraft:${minecraftVersion}"

	mappings loom.layered() {
		officialMojangMappings()

		if (prop('parchment_version') != '') {
			parchment("org.parchmentmc.data:parchment-${prop('minecraft_version')}:${prop('parchment_version')}@zip")
		}
	}

	// Core
	neoForge "net.neoforged:neoforge:${prop('neoforge_version')}"

	// YACL
	modImplementation(modrinth("yacl", "${prop('yacl_version')}-neoforge"))

	// For YACL to work
	forgeRuntimeLibrary(implementation(include("com.twelvemonkeys.imageio:imageio-core:3.10.0")))
	forgeRuntimeLibrary(implementation(include("com.twelvemonkeys.imageio:imageio-webp:3.10.0")))
	forgeRuntimeLibrary(implementation(include("com.twelvemonkeys.imageio:imageio-metadata:3.10.0")))
	forgeRuntimeLibrary(implementation(include("com.twelvemonkeys.common:common-lang:3.10.0")))
	forgeRuntimeLibrary(implementation(include("com.twelvemonkeys.common:common-io:3.10.0")))
	forgeRuntimeLibrary(implementation(include("com.twelvemonkeys.common:common-image:3.10.0")))
	forgeRuntimeLibrary(implementation(include("org.quiltmc.parsers:json:0.2.1")))
	forgeRuntimeLibrary(implementation(include("org.quiltmc.parsers:gson:0.2.1")))

	if (stonecutter.compare(minecraftVersion, '1.21.1') <= 0) {
		// Curios (https://www.curseforge.com/minecraft/mc-mods/curios)
		modCompileOnly("top.theillusivec4.curios:curios-neoforge:${prop('curios_version')}:api")
		modRuntimeOnly("top.theillusivec4.curios:curios-neoforge:${prop('curios_version')}")
	}

	common(project(path: ":common:$subproject", configuration: 'namedElements')) { transitive false }
	shadowBundle(project(path: ":common:$subproject", configuration: 'transformProductionNeoForge')) { transitive false }
}

processResources {
	def expandProps = [
		"modJavaVersion"     : prop('mod_java_version'),
		'modId'              : mod_id,
		'modName'            : mod_name,
		'modDescription'     : mod_description,
		'modVersion'         : mod_version,
		'modAuthor'          : mod_author,
		"minecraftVersion"   : prop('minecraft_version'),
		"minMinecraftVersion": prop('min_minecraft_version'),
		"neoForgeVersion"    : prop('neoforge_version'),
		"yaclVersion"        : prop('yacl_version'),
	]

	def tomlFileName = "META-INF/neoforge.mods.toml"

	filesMatching(['pack.mcmeta', tomlFileName, '*.mixins.json']) {
		expand expandProps
	}

	inputs.properties(expandProps)
}

shadowJar {
	exclude("fabric.mod.json")
	exclude("architectury.common.json")

	configurations = [project.configurations.shadowBundle]
	archiveClassifier = 'dev-shadow'
}

remapJar {
	injectAccessWidener.set(true)
	input.set(shadowJar.archiveFile)
	dependsOn(shadowJar)
	archiveClassifier.set(null)
	atAccessWideners.add("${mod_id}.accesswidener")
}

java {
	withSourcesJar()

	sourceCompatibility = JavaVersion.toVersion(prop('mod_java_version'))
	targetCompatibility = JavaVersion.toVersion(prop('mod_java_version'))
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = 'UTF-8'
	it.options.getRelease().set(prop('mod_java_version') as Integer)
}

repositories {
	// CurseForge
	maven { url "https://www.cursemaven.com" }

	// Modrinth
	maven {
		url "https://api.modrinth.com/maven"
		content {
			includeGroup("maven.modrinth")
		}
	}

	// NeoForge
	maven { url 'https://maven.neoforged.net/releases/' }

	// Quilt
	maven { url "https://maven.quiltmc.org/repository/release" }

	// Mixin Extras.
	maven {
		url 'https://jitpack.io'
		content {
			includeGroup 'com.github.llamalad7'
		}
	}

	// YACL
	maven { url "https://maven.isxander.dev/releases" }
	maven { url "https://maven.isxander.dev/snapshots" }
	maven { url 'https://thedarkcolour.github.io/KotlinForForge/' }

	// Mod Menu.
	maven { url "https://maven.terraformersmc.com/releases" }
	maven { url "https://maven.terraformersmc.com" }

	// Random
	maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }

	// Curios
	maven {
		url = "https://maven.theillusivec4.top/"
	}

	// Curios continuation
	maven {
		name = "OctoStudios"
		url = uri("https://maven.octo-studios.com/releases")
	}

	// Parchment
	maven {
		name = 'ParchmentMC'
		url = 'https://maven.parchmentmc.org'
	}
}

