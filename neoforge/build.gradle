def modrinth(String name, String version) {
	return "maven.modrinth:$name:$version"
}

plugins {
	id "com.github.johnrengelman.shadow" version "8.1.1"
}

allprojects {
	archivesBaseName = "${mod_id}-neoforge-mc${minecraft_version}"
}

architectury {
	platformSetupLoomIde()
	neoForge()
}

configurations {
	common
	shadowCommon
	compileClasspath.extendsFrom common
	runtimeClasspath.extendsFrom common
	developmentNeoForge.extendsFrom common
}

loom {
	accessWidenerPath = project(":common").loom.accessWidenerPath

	neoForge {
		runs {
			all {}

			data {
				data()
				programArgs("--all", "--mod", "${mod_id}")
				programArgs("--existing", project(":common").file("src/main/resources").absolutePath)
				programArgs("--output", project(":common").file("src/main/generated/resources").absolutePath)
				all {}
			}
		}
	}
}

dependencies {
	neoForge "net.neoforged:neoforge:${neoforge_version}"

	common(project(path: ":common", configuration: "namedElements")) { transitive false }
	shadowCommon(project(path: ":common", configuration: "transformProductionNeoForge")) { transitive = false }

	// Curios (https://www.curseforge.com/minecraft/mc-mods/curios)
	modCompileOnly("top.theillusivec4.curios:curios-neoforge:${curios_version}:api")
	modRuntimeOnly("top.theillusivec4.curios:curios-neoforge:${curios_version}")

	// YACL
	modImplementation(modrinth("yacl", "${yacl_version}-neoforge"))

	// For YACL to work
	forgeRuntimeLibrary(implementation(include("com.twelvemonkeys.imageio:imageio-core:3.10.0")))
	forgeRuntimeLibrary(implementation(include("com.twelvemonkeys.imageio:imageio-webp:3.10.0")))
	forgeRuntimeLibrary(implementation(include("com.twelvemonkeys.imageio:imageio-metadata:3.10.0")))
	forgeRuntimeLibrary(implementation(include("com.twelvemonkeys.common:common-lang:3.10.0")))
	forgeRuntimeLibrary(implementation(include("com.twelvemonkeys.common:common-io:3.10.0")))
	forgeRuntimeLibrary(implementation(include("com.twelvemonkeys.common:common-image:3.10.0")))
	forgeRuntimeLibrary(implementation(include("org.quiltmc.parsers:json:0.2.1")))
	forgeRuntimeLibrary(implementation(include("org.quiltmc.parsers:gson:0.2.1")))
}

shadowJar {
	exclude "fabric.mod.json"
	exclude "architectury.common.json"

	configurations = [project.configurations.shadowCommon]
	archiveClassifier.set("dev-shadow")
}

remapJar {
	inputFile.set shadowJar.archiveFile
	dependsOn shadowJar
	archiveClassifier.set(null)
	atAccessWideners.add("${mod_id}.accesswidener")
}

jar {
	archiveClassifier.set("dev")
}

sourcesJar {
	def commonSources = project(":common").sourcesJar
	dependsOn commonSources
	from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
	withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
		skip()
	}
}

repositories {
	maven {
		name = 'NeoForged'
		url = 'https://maven.neoforged.net/'
	}

	maven {
		url = "https://maven.theillusivec4.top/"
	}

	maven { url "https://www.cursemaven.com" }

	maven {
		name = "OctoStudios"
		url = uri("https://maven.octo-studios.com/releases")
	}
}
