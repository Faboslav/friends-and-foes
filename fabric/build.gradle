plugins {
	id "com.github.johnrengelman.shadow" version "8.1.1"
}

allprojects {
	archivesBaseName = "${rootProject.mod_id}-fabric-mc${rootProject.minecraft_version}"
}

architectury {
	platformSetupLoomIde()
	fabric()
}

loom {
	accessWidenerPath = project(":common").loom.accessWidenerPath
}

configurations {
	common
	shadowCommon
	compileClasspath.extendsFrom common
	runtimeClasspath.extendsFrom common
	developmentFabric.extendsFrom common
}

dependencies {
	// Core dependencies
	modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
	modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"

	// Mixin extras (https://github.com/LlamaLad7/MixinExtras)
	include(implementation(annotationProcessor("io.github.llamalad7:mixinextras-fabric:${rootProject.mixin_extras_version}")))

	// Mod menu (https://modrinth.com/mod/modmenu)
	modImplementation("com.terraformersmc:modmenu:${project.mod_menu_version}") { transitive = false }

	// Cloth config (https://www.curseforge.com/minecraft/mc-mods/cloth-config)
	modImplementation("me.shedaniel.cloth:cloth-config:${rootProject.cloth_config_version}")
	modImplementation("me.shedaniel.cloth:cloth-config-fabric:${rootProject.cloth_config_version}") { transitive = false }

	// Trinkets (https://www.curseforge.com/minecraft/mc-mods/trinkets)
	modImplementation("dev.emi:trinkets:${project.trinkets_version}")

	// Fix for CCA (https://github.com/Ladysnake/Cardinal-Components-API)
	modApi("dev.onyxstudios.cardinal-components-api:cardinal-components-base:${project.cca_version}")
	modApi("dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${project.cca_version}")

	// Auth (https://github.com/DJtheRedstoner/DevAuth)
	modRuntimeOnly("me.djtheredstoner:DevAuth-fabric:${rootProject.devauth_version}")

	common(project(path: ":common", configuration: "namedElements")) { transitive false }
	shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
}

processResources {
	inputs.property 'modId', rootProject.mod_id
	inputs.property 'modName', rootProject.mod_name
	inputs.property 'modDescription', rootProject.mod_description
	inputs.property 'modVersion', rootProject.mod_version
	inputs.property 'modAuthor', rootProject.mod_author
	inputs.property "minecraftVersion", rootProject.minecraft_version
	inputs.property "fabricLoaderVersion", rootProject.fabric_loader_version
	inputs.property "fabricApiVersion", rootProject.fabric_api_version

	filesMatching("fabric.mod.json") {
		expand([
			'modId'              : rootProject.mod_id,
			'modName'            : rootProject.mod_name,
			'modDescription'     : rootProject.mod_description,
			'modVersion'         : rootProject.mod_version,
			'modAuthor'          : rootProject.mod_author,
			"minecraftVersion"   : rootProject.minecraft_version,
			"fabricLoaderVersion": rootProject.fabric_loader_version,
			"fabricApiVersion"   : rootProject.fabric_api_version
		])
	}
}

shadowJar {
	exclude "architectury.common.json"

	configurations = [project.configurations.shadowCommon]
	archiveClassifier.set("dev-shadow")
}

remapJar {
	injectAccessWidener = true
	inputFile.set shadowJar.archiveFile
	dependsOn shadowJar
	archiveClassifier.set(null)
}

jar {
	archiveClassifier.set("dev")
}

sourcesJar {
	def commonSources = project(":common").sourcesJar
	dependsOn commonSources
	from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
	withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
		skip()
	}
}

repositories {
	maven {
		name = 'Fabric'
		url = 'https://maven.fabricmc.net/'
	}

	maven {
		name = "Modrinth"
		url = "https://api.modrinth.com/maven"

		content {
			includeGroup "maven.modrinth"
		}
	}

	maven {
		name = "TerraformersMC"
		url "https://maven.terraformersmc.com/releases/"
	}

	maven {
		name = "Ladysnake Libs"
		url = 'https://maven.ladysnake.org/releases'
	}

	maven { url "https://www.cursemaven.com" }

	maven { url = "https://pkgs.dev.azure.com/djtheredstoner/DevAuth/_packaging/public/maven/v1" }
}
