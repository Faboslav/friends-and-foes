plugins {
	id 'java'
	id 'idea'
	id 'dev.architectury.loom'
	id 'architectury-plugin'
}

def minecraftVersion = stonecutter.current.version

def modrinth(String name, String version) {
	return "maven.modrinth:$name:$version"
}

def prop(String name) {
	return rootProject.project(stonecutter.current.project).property(name).toString()
}

base {
	archivesName.set("${mod_id}-common-mc${minecraftVersion}-${mod_version}")
}

architectury {
	common prop('enabled_platforms').split(',')
}

loom {
	silentMojangMappingsLicense()

	accessWidenerPath = getRootProject().file("common/src/main/resources/${mod_id}.accesswidener")

	runConfigs.all {
		ideConfigGenerated true
	}
}

dependencies {
	minecraft "com.mojang:minecraft:${minecraftVersion}"
	mappings loom.layered() {
		officialMojangMappings()

		if (prop('parchment_version') != '') {
			parchment("org.parchmentmc.data:parchment-${prop('minecraft_version')}:${prop('parchment_version')}@zip")
		}
	}

	// General
	modImplementation("net.fabricmc:fabric-loader:${prop('fabric_loader_version')}")

	// Required client
	modImplementation("com.teamresourceful.resourcefullib:resourcefullib-common-${prop('resourceful_lib_version')}")
	modImplementation(modrinth("yacl", "${prop('yacl_version')}-fabric"))
}

processResources {
	def expandProps = [
		"modJavaVersion"  : prop('mod_java_version'),
		'modId'           : mod_id,
		'modVersion'      : mod_version,
		"minecraftVersion": prop('minecraft_version'),
	]

	filesMatching(['*.mixins.json']) {
		expand expandProps
	}

	inputs.properties(expandProps)
	duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

java {
	withSourcesJar()

	sourceCompatibility = JavaVersion.toVersion(prop('mod_java_version'))
	targetCompatibility = JavaVersion.toVersion(prop('mod_java_version'))
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = 'UTF-8'
	it.options.getRelease().set(prop('mod_java_version') as Integer)
}

tasks.withType(Jar).configureEach {
	duplicatesStrategy = DuplicatesStrategy.INCLUDE
}