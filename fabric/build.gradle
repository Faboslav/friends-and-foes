plugins {
	id 'java'
	id 'idea'
	id 'dev.architectury.loom'
	id 'architectury-plugin'
	id 'com.github.johnrengelman.shadow'
}

def subproject = stonecutter.current.project
def minecraftVersion = stonecutter.current.version

def modrinth(String name, String version) {
	return "maven.modrinth:$name:$version"
}

def prop(String name) {
	return rootProject.project(stonecutter.current.project).property(name).toString()
}

stonecutter {
	dependency("trinkets", prop('trinkets_version'))
}

base {
	archivesName.set("${mod_id}-fabric-mc${minecraftVersion}-${mod_version}")
}

architectury {
	platformSetupLoomIde()
	fabric()
}

loom {
	silentMojangMappingsLicense()

	accessWidenerPath = project(":common:$subproject").loom.accessWidenerPath

	runConfigs.all {
		ideConfigGenerated true
	}
}

configurations {
	common {
		canBeResolved = true
		canBeConsumed = false
	}

	compileClasspath.extendsFrom common
	runtimeClasspath.extendsFrom common
	developmentFabric.extendsFrom common

	shadowBundle {
		canBeResolved = true
		canBeConsumed = false
	}
}

dependencies {
	minecraft "com.mojang:minecraft:${minecraftVersion}"
	mappings loom.layered() {
		officialMojangMappings()

		if (prop('parchment_version') != '') {
			parchment("org.parchmentmc.data:parchment-${prop('minecraft_version')}:${prop('parchment_version')}@zip")
		}
	}

	// Core dependencies
	modImplementation "net.fabricmc:fabric-loader:${prop('fabric_loader_version')}"
	modApi "net.fabricmc.fabric-api:fabric-api:${prop('fabric_api_version')}+${prop('minecraft_version')}"

	modImplementation("com.teamresourceful.resourcefullib:resourcefullib-fabric-${prop('resourceful_lib_mc_version')}:${prop('resourceful_lib_lib_version')}")

	// YetAnotherConfigLib (https://docs.isxander.dev/yet-another-config-lib)
	modImplementation(modrinth("yacl", "${prop('yacl_version')}-fabric"))

	// Mod menu (https://modrinth.com/mod/modmenu)
	modImplementation("com.terraformersmc:modmenu:${prop('mod_menu_version')}") { transitive = false }

	if (stonecutter.compare(minecraftVersion, '1.21.1') <= 0) {
		// Trinkets (https://www.curseforge.com/minecraft/mc-mods/trinkets)
		modImplementation("dev.emi:trinkets:${prop('trinkets_version')}")

		// Fix for CCA (https://github.com/Ladysnake/Cardinal-Components-API)
		//modApi("dev.onyxstudios.cardinal-components-api:cardinal-components-base:${cca_version}") { transitive = false }
		//modApi("dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${cca_version}") { transitive = false }
	}

	// Auth (https://github.com/DJtheRedstoner/DevAuth)
	modRuntimeOnly("me.djtheredstoner:DevAuth-fabric:${devauth_version}")

	common(project(path: ":common:$subproject", configuration: 'namedElements')) { transitive false }
	shadowBundle(project(path: ":common:$subproject", configuration: 'transformProductionFabric')) { transitive false }
}

processResources {
	def expandProps = [
		"modJavaVersion"     	: prop('mod_java_version'),
		'modId'              	: mod_id,
		'modName'            	: mod_name,
		'modDescription'     	: mod_description,
		'modVersion'         	: mod_version,
		'modAuthor'          	: mod_author,
		"minecraftVersion"   	: prop('minecraft_version'),
		"minMinecraftVersion"	: prop('min_minecraft_version'),
		"fabricLoaderVersion"	: prop('fabric_loader_version'),
		"fabricApiVersion"   	: prop('fabric_api_version'),
		"yaclVersion"        	: prop('yacl_version'),
		"resourcefulLibVersion" : prop('resourceful_lib_lib_version'),
	]

	filesMatching(['fabric.mod.json', '*.mixins.json']) {
		expand expandProps
	}

	inputs.properties(expandProps)
}

shadowJar {
	configurations = [project.configurations.shadowBundle]
	archiveClassifier = 'dev-shadow'
}

jar {
	archiveClassifier.set("dev")
}

remapJar {
	injectAccessWidener.set(true)
	input.set(shadowJar.archiveFile)
	dependsOn(shadowJar)
	archiveClassifier.set(null)
}

java {
	withSourcesJar()

	sourceCompatibility = JavaVersion.toVersion(prop('mod_java_version'))
	targetCompatibility = JavaVersion.toVersion(prop('mod_java_version'))
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = 'UTF-8'
	it.options.getRelease().set(prop('mod_java_version') as Integer)
}